{
	"info": {
		"_postman_id": "59b6da23-261b-4fdf-be5d-7c694e7a7d2a",
		"name": "get-assessment-results",
		"description": "Test suite for Single Assessment Result API focusing on happy paths with selective negative cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36990357"
	},
	"item": [
		{
			"name": "Happy Path Tests",
			"item": [
				{
					"name": "Get Single Assessment Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check top-level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('assessmentResult').that.is.an('object');",
									"    ",
									"    const result = responseData.assessmentResult;",
									"    ",
									"    // Required string fields (from BaseResponseDTO)",
									"    pm.expect(result).to.have.property('sourcedId').that.is.a('string');",
									"    pm.expect(result).to.have.property('status').that.is.a('string');",
									"    pm.expect(result).to.have.property('dateLastModified').that.is.a('string');",
									"    ",
									"    // Required reference objects",
									"    const checkRequiredReference = (obj, fieldName) => {",
									"        pm.expect(obj).to.have.property(fieldName).that.is.an('object');",
									"        pm.expect(obj[fieldName]).to.have.property('href').that.is.a('string');",
									"        pm.expect(obj[fieldName]).to.have.property('sourcedId').that.is.a('string');",
									"        pm.expect(obj[fieldName]).to.have.property('type').that.is.a('string');",
									"    };",
									"    ",
									"    if (result.assessmentLineItem !== undefined && result.assessmentLineItem !== null){",
									"        checkRequiredReference(result, 'assessmentLineItem');",
									"    }",
									"",
									"    if (result.student !== undefined && result.student !== null){",
									"        checkRequiredReference(result, 'student');",
									"    }",
									"",
									"    if (result.scoreScale !== undefined && result.scoreScale !== null) {",
									"        checkRequiredReference(result, 'scoreScale');",
									"    }",
									"    ",
									"    // Required fields",
									"    pm.expect(result).to.have.property('scoreStatus').that.is.a('string');",
									"    pm.expect(result).to.have.property('scoreDate').that.is.a('string');",
									"    ",
									"    // Optional numeric fields (can be null)",
									"    pm.expect(result).to.have.property('score');",
									"    if (result.score !== null && result.score !== undefined) {",
									"        pm.expect(result.score).to.be.a('number');",
									"    }",
									"    ",
									"    pm.expect(result).to.have.property('scorePercentile');",
									"    if (result.scorePercentile !== null && result.scorePercentile !== undefined) {",
									"        pm.expect(result.scorePercentile).to.be.a('number');",
									"    }",
									"    ",
									"    // Optional string fields (can be null)",
									"    pm.expect(result).to.have.property('textScore');",
									"    if (result.textScore !== null && result.textScore !== undefined) {",
									"        pm.expect(result.textScore).to.be.a('string');",
									"    }",
									"    ",
									"    pm.expect(result).to.have.property('comment');",
									"    if (result.comment !== null && result.comment !== undefined) {",
									"        pm.expect(result.comment).to.be.a('string');",
									"    }",
									"    ",
									"    // Optional boolean fields (can be null)",
									"    const booleanFields = ['inProgress', 'incomplete', 'late', 'missing'];",
									"    booleanFields.forEach(field => {",
									"        pm.expect(result).to.have.property(field);",
									"        if (result[field] !== null && result[field] !== undefined) {",
									"            pm.expect(result[field]).to.be.a('boolean');",
									"        }",
									"    });",
									"    ",
									"    // Optional learningObjectiveSet",
									"    pm.expect(result).to.have.property('learningObjectiveSet');",
									"    // Note: Not checking type as it's marked as 'any' in DTO",
									"    ",
									"    // Date field validation",
									"    const date = new Date(result.scoreDate);",
									"    pm.expect(date.toISOString()).to.equal(result.scoreDate);",
									"",
									"    // Validate status values",
									"    pm.expect(result.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'DELETED']);",
									"    pm.expect(result.scoreStatus).to.be.oneOf(['FULLY_GRADED', 'PARTIALLY_GRADED', 'NOT_GRADED']);",
									"    ",
									"    // Validate reference URLs",
									"    if (result.assessmentLineItem?.href) {",
									"        pm.expect(result.assessmentLineItem.href).to.include('/v1/assessmentLineItems/');",
									"    }",
									"    if (result.student?.href) {",
									"        pm.expect(result.student.href).to.include('/v1/users/');",
									"    }",
									"    if (result.scoreScale?.href) {",
									"        pm.expect(result.scoreScale.href).to.include('/v1/scoreScales/');",
									"    }",
									"});",
									"",
									"// Performance test",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults/{{validSourcedId}}"
					},
					"response": []
				},
				{
					"name": "Get Assessment Result (Selected Fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Only requested fields are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('assessmentResult').that.is.an('object');",
									"    ",
									"    const result = responseData.assessmentResult;",
									"    ",
									"    // Define expected fields",
									"    const expectedFields = ['sourcedId', 'score', 'status'];",
									"    ",
									"    // Get actual fields from the response",
									"    const actualFields = Object.keys(result);",
									"    ",
									"    // Check if only expected fields are present",
									"    const hasOnlyExpectedFields = expectedFields.every(field => actualFields.includes(field));",
									"    pm.expect(hasOnlyExpectedFields, 'All expected fields should be present').to.be.true;",
									"    ",
									"    const hasNoExtraFields = actualFields.every(field => expectedFields.includes(field));",
									"    pm.expect(hasNoExtraFields, 'No extra fields should be present').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults/{{validSourcedId}}?fields=sourcedId,score,status",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults",
								"{{validSourcedId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "sourcedId,score,status"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Invalid Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description').equal('Missing required headers');",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    ",
									"    const errorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(errorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(errorField).to.have.property('imsx_codeMinorFieldValue').equal('unauthorisedrequest');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults/{{validSourcedId}}"
					},
					"response": []
				},
				{
					"name": "Invalid SourcedId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults/invalid-uuid"
					},
					"response": []
				},
				{
					"name": "Empty Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults/{{validSourcedId}}?fields=",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults",
								"{{validSourcedId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Not Found SourcedId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description').contain('not found');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults/{{$guid}}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"type": "string"
		},
		{
			"key": "x-client-id",
			"value": "{{x-client-id}}",
			"type": "string"
		},
		{
			"key": "gradebookServiceApiPrefix",
			"value": "/ims/oneroster/gradebook/v1p2",
			"type": "string"
		},
		{
			"key": "x-app-key",
			"value": "{{x-app-key}}",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "{{bearer-token}}",
			"type": "string"
		},
		{
			"key": "validSourcedId",
			"value": "<valid-sourced-id>",
			"type": "default"
		}
	]
}