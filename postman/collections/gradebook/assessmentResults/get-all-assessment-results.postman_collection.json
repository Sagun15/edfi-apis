{
	"info": {
		"_postman_id": "6e2dcb52-e429-4584-82b0-175d4c0949bc",
		"name": "get-all-assessment-results",
		"description": "Test suite for AssessmentResults API focusing on happy paths with selective negative cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36990357"
	},
	"item": [
		{
			"name": "Happy Path Tests",
			"item": [
				{
					"name": "Get All Assessment Results (Default)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check top-level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('assessmentResults').that.is.an('array');",
									"    ",
									"    if(responseData.assessmentResults.length > 0) {",
									"        const result = responseData.assessmentResults[0];",
									"        ",
									"        // Required string fields (from BaseResponseDTO)",
									"        pm.expect(result).to.have.property('sourcedId').that.is.a('string');",
									"        pm.expect(result).to.have.property('status').that.is.a('string');",
									"        pm.expect(result).to.have.property('dateLastModified').that.is.a('string');",
									"        ",
									"        // Required reference objects",
									"        const checkRequiredReference = (obj, fieldName) => {",
									"            pm.expect(obj).to.have.property(fieldName).that.is.an('object');",
									"            pm.expect(obj[fieldName]).to.have.property('href').that.is.a('string');",
									"            pm.expect(obj[fieldName]).to.have.property('sourcedId').that.is.a('string');",
									"            pm.expect(obj[fieldName]).to.have.property('type').that.is.a('string');",
									"        };",
									"        ",
									"        if (result.assessmentLineItem !== undefined && result.assessmentLineItem !== null){",
									"            checkRequiredReference(result, 'assessmentLineItem');",
									"        }",
									"",
									"        if (result.student !== undefined && result.student !== null){",
									"            checkRequiredReference(result, 'student');",
									"        }",
									"",
									"        if (result.scoreScale !== undefined && result.scoreScale !== null) {",
									"            checkRequiredReference(result, 'scoreScale');",
									"        }",
									"        ",
									"        // Required fields",
									"        pm.expect(result).to.have.property('scoreStatus').that.is.a('string');",
									"        pm.expect(result).to.have.property('scoreDate').that.is.a('string');",
									"        ",
									"        // Optional numeric fields (can be null)",
									"        pm.expect(result).to.have.property('score');",
									"        if (result.score !== null && result.score !== undefined) {",
									"            pm.expect(result.score).to.be.a('number');",
									"        }",
									"        ",
									"        pm.expect(result).to.have.property('scorePercentile');",
									"        if (result.scorePercentile !== null && result.scorePercentile !== undefined) {",
									"            pm.expect(result.scorePercentile).to.be.a('number');",
									"        }",
									"        ",
									"        // Optional string fields (can be null)",
									"        pm.expect(result).to.have.property('textScore');",
									"        if (result.textScore !== null && result.textScore !== undefined) {",
									"            pm.expect(result.textScore).to.be.a('string');",
									"        }",
									"        ",
									"        pm.expect(result).to.have.property('comment');",
									"        if (result.comment !== null && result.comment !== undefined) {",
									"            pm.expect(result.comment).to.be.a('string');",
									"        }",
									"        ",
									"        // Optional boolean fields (can be null)",
									"        const booleanFields = ['inProgress', 'incomplete', 'late', 'missing'];",
									"        booleanFields.forEach(field => {",
									"            pm.expect(result).to.have.property(field);",
									"            if (result[field] !== null && result[field] !== undefined) {",
									"                pm.expect(result[field]).to.be.a('boolean');",
									"            }",
									"        });",
									"        ",
									"        // Optional learningObjectiveSet",
									"        pm.expect(result).to.have.property('learningObjectiveSet');",
									"        // Note: Not checking type as it's marked as 'any' in DTO",
									"        ",
									"        // Date field validation",
									"        const date = new Date(result.scoreDate);",
									"        pm.expect(date.toISOString()).to.equal(result.scoreDate);",
									"",
									"        // Validate status values",
									"        pm.expect(result.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'DELETED']);",
									"        pm.expect(result.scoreStatus).to.be.oneOf(['FULLY_GRADED', 'PARTIALLY_GRADED', 'NOT_GRADED']);",
									"        ",
									"        // Validate reference URLs",
									"        if (result.assessmentLineItem?.href) {",
									"            pm.expect(result.assessmentLineItem.href).to.include('/v1/assessmentLineItems/');",
									"        }",
									"        if (result.student?.href) {",
									"            pm.expect(result.student.href).to.include('/v1/users/');",
									"        }",
									"        if (result.scoreScale?.href) {",
									"            pm.expect(result.scoreScale.href).to.include('/v1/scoreScales/');",
									"        }",
									"    }",
									"});",
									"",
									"// Additional test for pagination headers if applicable",
									"pm.test(\"Pagination headers are present\", function () {",
									"    if (pm.response.headers.has('X-Total-Count')) {",
									"        pm.expect(pm.response.headers.get('X-Total-Count')).to.be.a('string');",
									"    }",
									"    if (pm.response.headers.has('Link')) {",
									"        pm.expect(pm.response.headers.get('Link')).to.include('rel=');",
									"    }",
									"});",
									"",
									"// Performance test",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults"
					},
					"response": []
				},
				{
					"name": "Get Assessment Results (with Pagination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Pagination is working correctly\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if assessmentResults exists and has correct length",
									"    pm.expect(responseData).to.have.property('assessmentResults').that.is.an('array');",
									"    pm.expect(responseData.assessmentResults.length).to.be.at.most(5);",
									"    ",
									"    // Verify response structure",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    ",
									"    // If your API uses these pagination headers",
									"    if (pm.response.headers.has('X-Total-Count')) {",
									"        pm.expect(pm.response.headers.get('X-Total-Count')).to.be.a('string');",
									"    }",
									"    ",
									"    if (pm.response.headers.has('Link')) {",
									"        const linkHeader = pm.response.headers.get('Link');",
									"        pm.expect(linkHeader).to.be.a('string');",
									"        ",
									"        // Optional: Validate link header format if present",
									"        if (linkHeader) {",
									"            pm.expect(linkHeader).to.match(/rel=/);",
									"        }",
									"    }",
									"});",
									"",
									"// Additional test for validating query parameters",
									"pm.test(\"Query parameters are properly reflected\", function() {",
									"    const url = pm.request.url;",
									"    const limitParam = url.query.find(param => param.key === 'limit');",
									"    const offsetParam = url.query.find(param => param.key === 'offset');",
									"    ",
									"    pm.expect(limitParam.value).to.equal('5');",
									"    pm.expect(offsetParam.value).to.equal('0');",
									"});",
									"",
									"// Optional: Test response time",
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?limit=5&offset=0",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assessment Results (Sorted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are sorted correctly\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if assessmentResults exists and has items",
									"    pm.expect(responseData).to.have.property('assessmentResults').that.is.an('array');",
									"    ",
									"    if(responseData.assessmentResults.length > 1) {",
									"        // Debug response structure",
									"        console.log(\"First result structure:\", responseData.assessmentResults[0]);",
									"        ",
									"        // Filter out any null dateLastModified values and map to dates",
									"        const validDates = responseData.assessmentResults",
									"            .filter(item => item.dateLastModified != null)",
									"            .map(item => item.dateLastModified);",
									"            ",
									"        console.log(\"First few valid dates:\", validDates.slice(0, 3));",
									"        ",
									"        // Only proceed with sorting test if we have valid dates",
									"        if(validDates.length > 1) {",
									"            // Create sorted copy in descending order",
									"            const sortedDates = [...validDates].sort((a, b) => {",
									"                const dateA = new Date(a);",
									"                const dateB = new Date(b);",
									"                return dateB - dateA;",
									"            });",
									"            ",
									"            // Verify descending order",
									"            let isSorted = true;",
									"            for(let i = 0; i < validDates.length - 1; i++) {",
									"                const currentDate = new Date(validDates[i]);",
									"                const nextDate = new Date(validDates[i + 1]);",
									"                if(currentDate < nextDate) {",
									"                    isSorted = false;",
									"                    console.log(`Sort issue at index ${i}:`, {",
									"                        current: validDates[i],",
									"                        next: validDates[i + 1]",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"            ",
									"            pm.expect(isSorted, \"Dates should be in descending order\").to.be.true;",
									"            ",
									"            // Compare first dates after ensuring they exist",
									"            if(validDates[0] && sortedDates[0]) {",
									"                pm.expect(validDates[0]).to.equal(sortedDates[0], \"First dates should match\");",
									"            }",
									"        } else {",
									"            console.log(\"Not enough valid dates to test sorting\");",
									"        }",
									"    } else {",
									"        console.log(\"Not enough results to test sorting\");",
									"    }",
									"});",
									"",
									"// Additional test to verify date format of non-null values",
									"pm.test(\"Date format is valid for non-null dates\", function() {",
									"    const responseData = pm.response.json();",
									"    responseData.assessmentResults.forEach((result, index) => {",
									"        if(result.dateLastModified) {",
									"            const isValidDate = !isNaN(new Date(result.dateLastModified).getTime());",
									"            pm.expect(isValidDate, `Invalid date at index ${index}`).to.be.true;",
									"        }",
									"    });",
									"});",
									"",
									"// Test for sort parameters",
									"pm.test(\"Sort parameters are correct\", function() {",
									"    const url = pm.request.url;",
									"    const sortParam = url.query.find(param => param.key === 'sort');",
									"    const orderByParam = url.query.find(param => param.key === 'orderBy');",
									"    ",
									"    pm.expect(sortParam.value).to.equal('dateLastModified');",
									"    pm.expect(orderByParam.value).to.equal('DESC');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?sort=dateLastModified&orderBy=DESC",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "sort",
									"value": "dateLastModified"
								},
								{
									"key": "orderBy",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assessment Results (Filtered)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter is applied correctly\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if assessmentResults exists and is an array",
									"    pm.expect(responseData).to.have.property('assessmentResults').that.is.an('array');",
									"    ",
									"    // Check if array is not empty",
									"    pm.expect(responseData.assessmentResults.length).to.be.greaterThan(0, 'Response should contain at least one result');",
									"    ",
									"    // Check if all items have status 'ACTIVE'",
									"    const allActive = responseData.assessmentResults.every(item => item.status === 'ACTIVE');",
									"    pm.expect(allActive, 'All items should have status ACTIVE').to.be.true;",
									"    ",
									"    // Log first few items for debugging",
									"    console.log(\"First few results:\", responseData.assessmentResults.slice(0, 3).map(item => ({",
									"        sourcedId: item.sourcedId,",
									"        status: item.status",
									"    })));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?filter=status='active'",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "filter",
									"value": "status='active'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assessment Results (Selected Fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Only requested fields are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if assessmentResults exists and is an array",
									"    pm.expect(responseData).to.have.property('assessmentResults').that.is.an('array');",
									"    pm.expect(responseData.assessmentResults.length).to.be.greaterThan(0, 'Response should contain at least one result');",
									"    ",
									"    // Get the first item",
									"    const firstItem = responseData.assessmentResults[0];",
									"    ",
									"    // Define expected fields (excluding top-level response fields)",
									"    const expectedFields = ['sourcedId', 'score', 'status'];",
									"    ",
									"    // Get actual fields from the response item",
									"    const actualFields = Object.keys(firstItem);",
									"    ",
									"    // Check if only expected fields are present",
									"    const hasOnlyExpectedFields = expectedFields.every(field => actualFields.includes(field));",
									"    pm.expect(hasOnlyExpectedFields, 'All expected fields should be present').to.be.true;",
									"    ",
									"    const hasNoExtraFields = actualFields.every(field => expectedFields.includes(field));",
									"    pm.expect(hasNoExtraFields, 'No extra fields should be present').to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?fields=sourcedId,score,status",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "fields",
									"value": "sourcedId,score,status"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assessment Results (Combined Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Combined parameters work correctly\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check base structure",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('assessmentResults').that.is.an('array');",
									"    ",
									"    // Check pagination",
									"    pm.expect(responseData.assessmentResults.length).to.be.at.most(5);",
									"    ",
									"    if(responseData.assessmentResults.length > 0) {",
									"        const firstItem = responseData.assessmentResults[0];",
									"        ",
									"        // Check required properties",
									"        pm.expect(firstItem).to.have.property('sourcedId');",
									"        pm.expect(firstItem).to.have.property('score');",
									"        pm.expect(firstItem.status).to.equal('ACTIVE');",
									"        ",
									"        // Debug date sorting",
									"        if(responseData.assessmentResults.length > 1) {",
									"            // Log dates for debugging",
									"            console.log(\"Dates in response:\");",
									"            responseData.assessmentResults.forEach((item, index) => {",
									"                console.log(`Index ${index}: ${item.dateLastModified}`);",
									"            });",
									"            ",
									"            // Verify dates are valid",
									"            const dates = responseData.assessmentResults.map(item => {",
									"                const date = new Date(item.dateLastModified);",
									"                if (isNaN(date.getTime())) {",
									"                    console.log(`Invalid date found: ${item.dateLastModified}`);",
									"                }",
									"                return date;",
									"            });",
									"            ",
									"            // Check sorting for all consecutive pairs",
									"            let isSorted = true;",
									"            for(let i = 0; i < dates.length - 1; i++) {",
									"                if (dates[i] < dates[i + 1]) {",
									"                    console.log(`Sorting issue at index ${i}:`);",
									"                    console.log(`Date ${i}: ${dates[i].toISOString()}`);",
									"                    console.log(`Date ${i + 1}: ${dates[i + 1].toISOString()}`);",
									"                    isSorted = false;",
									"                    break;",
									"                }",
									"            }",
									"            ",
									"            pm.expect(isSorted, \"Results should be sorted in descending order\").to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?limit=5&offset=0&sort=dateLastModified&orderBy=DESC&filter=status='active'&fields=sourcedId,score,status",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "sort",
									"value": "dateLastModified"
								},
								{
									"key": "orderBy",
									"value": "DESC"
								},
								{
									"key": "filter",
									"value": "status='active'"
								},
								{
									"key": "fields",
									"value": "sourcedId,score,status"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Invalid filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?filter=status > 'active'",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "filter",
									"value": "status > 'active'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?fields=",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "fields",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults?sort=alpha",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"assessmentResults"
							],
							"query": [
								{
									"key": "sort",
									"value": "alpha"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check top level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description').equal('Missing required headers');",
									"    ",
									"    // Check CodeMinor structure",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    ",
									"    // Check specific error details",
									"    const errorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(errorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(errorField).to.have.property('imsx_codeMinorFieldValue').equal('unauthorisedrequest');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/assessmentResults"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"type": "string"
		},
		{
			"key": "x-client-id",
			"value": "{{x-client-id}}",
			"type": "string"
		},
		{
			"key": "gradebookServiceApiPrefix",
			"value": "/ims/oneroster/gradebook/v1p2",
			"type": "string"
		},
		{
			"key": "x-app-key",
			"value": "{{x-app-key}}",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "{{bearer-token}}",
			"type": "string"
		}
	]
}