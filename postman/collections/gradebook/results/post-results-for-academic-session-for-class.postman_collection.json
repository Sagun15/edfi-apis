{
  "info": {
    "_postman_id": "{{$guid}}",
    "name": "post-results-for-academic-session-for-class",
    "description": "Comprehensive test suite for postResultsForAcademicSessionForClass API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25454109"
  },
  "item": [
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Create Single Result - Minimal Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test suite for minimal fields result creation",
                  "pm.test('Status code is 201 Created', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Validate response structure and content",
                  "pm.test('Response has correct structure', function() {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    // Check top level properties",
                  "    pm.expect(response).to.have.property('imsx_codeMajor', 'success');",
                  "    pm.expect(response).to.have.property('imsx_severity', 'status');",
                  "    pm.expect(response).to.have.property('sourcedIdPairs').that.is.an('array');",
                  "});",
                  "",
                  "// Validate sourcedIdPairs array and match with request payload",
                  "pm.test('sourcedIdPairs match request payload', function() {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const pairs = response.sourcedIdPairs;",
                  "    ",
                  "    // Check array is not empty",
                  "    pm.expect(pairs).to.have.lengthOf(requestBody.results.length);",
                  "    ",
                  "    // Check pair structure and match with request",
                  "    const pair = pairs[0];",
                  "    const requestResult = requestBody.results[0];",
                  "    ",
                  "    pm.expect(pair).to.have.property('suppliedSourcedId').that.is.a('string');",
                  "    pm.expect(pair).to.have.property('allocatedSourcedId').that.is.a('string');",
                  "    ",
                  "    // Verify suppliedSourcedId matches the request payload sourcedId",
                  "    pm.expect(pair.suppliedSourcedId).to.equal(requestResult.sourcedId);",
                  "    ",
                  "    // Validate UUID format",
                  "    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
                  "    pm.expect(pair.suppliedSourcedId).to.match(uuidRegex);",
                  "});",
                  "",
                  "// Performance test",
                  "pm.test('Response time is acceptable', function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000); // 1 second threshold",
                  "});",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n       \"scoreDate\": \"2025-02-17\",\n      \"score\": 85\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{classSourcedId}}",
                "academicSessions",
                "{{academicSessionSourcedId}}",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Multiple Results - With Attempts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test suite for multiple results creation with attempts",
                  "pm.test('Status code is 201 Created', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Validate response structure and content",
                  "pm.test('Response has correct structure', function() {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    // Check top level properties",
                  "    pm.expect(response).to.have.property('imsx_codeMajor', 'success');",
                  "    pm.expect(response).to.have.property('imsx_severity', 'status');",
                  "    pm.expect(response).to.have.property('sourcedIdPairs').that.is.an('array');",
                  "});",
                  "",
                  "// Validate sourcedIdPairs array and match with request payload",
                  "pm.test('sourcedIdPairs match request payload', function() {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const pairs = response.sourcedIdPairs;",
                  "    ",
                  "    // Check array length matches request",
                  "    pm.expect(pairs).to.have.lengthOf(requestBody.results.length, ",
                  "        'Response should have same number of sourcedIdPairs as request results');",
                  "    ",
                  "    // Check each pair matches corresponding request result",
                  "    requestBody.results.forEach((requestResult, index) => {",
                  "        const pair = pairs[index];",
                  "        ",
                  "        // Validate pair structure",
                  "        pm.expect(pair).to.have.property('suppliedSourcedId').that.is.a('string');",
                  "        pm.expect(pair).to.have.property('allocatedSourcedId').that.is.a('string');",
                  "        ",
                  "        // Verify sourcedId matches",
                  "        pm.expect(pair.suppliedSourcedId).to.equal(requestResult.sourcedId,",
                  "            `Result ${index + 1}: suppliedSourcedId should match request sourcedId`);",
                  "        ",
                  "        // Validate UUID format",
                  "        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
                  "        pm.expect(pair.suppliedSourcedId).to.match(uuidRegex,",
                  "            `Result ${index + 1}: sourcedId should be valid UUID`);",
                  "    });",
                  "});",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{$guid}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"endedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\",\n                            \"gradedBy\": {\n                                \"sourcedId\": \"{{enrolledStudentId}}\",\n                                \"type\": \"user\",\n                                \"href\": \"/api/users/{{enrolledStudentId}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n     \"score\": 85,\n            \"textScore\": \"B+\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Good work on the test\"\n        },\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{$guid}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2025-02-17T09:45:00Z\",\n                            \"endedAtTime\": \"2025-02-17T10:15:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\"\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n      \"score\": 90,\n            \"textScore\": \"A-\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Excellent performance\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{classSourcedId}}",
                "academicSessions",
                "{{academicSessionSourcedId}}",
                "results"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Negative Tests",
      "item": [
        {
          "name": "Data Integrity Validations",
          "item": [
            {
              "name": "Duplicate Result SourcedIds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 422', function() {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{existingResultId}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{$guid}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"endedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\",\n                            \"gradedBy\": {\n                                \"sourcedId\": \"{{enrolledStudentId}}\",\n                                \"type\": \"user\",\n                                \"href\": \"/api/users/{{enrolledStudentId}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n    \"score\": 85,\n            \"textScore\": \"B+\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Good work on the test\"\n        },\n        {\n            \"sourcedId\": \"{{existingResultId}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{$guid}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2025-02-17T09:45:00Z\",\n                            \"endedAtTime\": \"2025-02-17T10:15:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\"\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n            \"score\": 90,\n            \"textScore\": \"A-\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Excellent performance\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Existing Result SourcedIds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 422', function() {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{existingResultId}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{$guid}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"endedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\",\n                            \"gradedBy\": {\n                                \"sourcedId\": \"{{enrolledStudentId}}\",\n                                \"type\": \"user\",\n                                \"href\": \"/api/users/{{enrolledStudentId}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n            \"score\": 85,\n            \"textScore\": \"B+\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Good work on the test\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Duplicate Attempt SourcedIds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 422', function() {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{existingAttemptId}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"endedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\",\n                            \"gradedBy\": {\n                                \"sourcedId\": \"{{enrolledStudentId}}\",\n                                \"type\": \"user\",\n                                \"href\": \"/api/users/{{enrolledStudentId}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n            \"score\": 85,\n            \"textScore\": \"B+\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Good work on the test\"\n        },\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{existingAttemptId}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2025-02-17T09:45:00Z\",\n                            \"endedAtTime\": \"2025-02-17T10:15:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\"\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n            \"score\": 90,\n            \"textScore\": \"A-\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Excellent performance\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Existing Attempt SourcedIds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 422', function() {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"metadata\": {\n                \"extensions\": {\n                    \"fields\": {\n                        \"attempt\": {\n                            \"sourcedId\": \"{{existingAttemptId}}\",\n                            \"count\": 1,\n                            \"startedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"endedAtTime\": \"2024-01-01T00:00:00Z\",\n                            \"duration\": 1800\n                        },\n                        \"result\": {\n                            \"maxScore\": 100,\n                            \"resultType\": \"RESULT\",\n                            \"gradedBy\": {\n                                \"sourcedId\": \"{{enrolledStudentId}}\",\n                                \"type\": \"user\",\n                                \"href\": \"/api/users/{{enrolledStudentId}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n            \"score\": 85,\n            \"textScore\": \"B+\",\n            \"scoreDate\": \"2025-02-17\",\n            \"comment\": \"Good work on the test\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Inconsistent Class SourcedId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 422', function() {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{$guid}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n      \"scoreDate\": \"2025-02-17\",\n       \"score\": 85\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Reference Validations",
          "item": [
            {
              "name": "Non-existent Academic Session",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 404', function() {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n    \"scoreDate\": \"2025-02-17\",\n         \"score\": 85\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{wrongTermSessionId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{wrongTermSessionId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Class Not in Academic Session Term",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 422', function() {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{randomClassId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{randomClassId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n     \"scoreDate\": \"2025-02-17\",\n        \"score\": 85\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{randomClassId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{randomClassId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Non-existent Student",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 404', function() {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"student\": {\n                \"sourcedId\": \"{{$guid}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{$guid}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{classLineItemId}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{classLineItemId}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n     \"scoreDate\": \"2025-02-17\",\n        \"score\": 85\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Non-existent LineItem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 404', function() {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message includes duplicate sourcedId warning', function() {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.imsx_codeMajor).to.include('failure');",
                      "});",
                      "",
                      "// Performance test",
                      "pm.test('Response time is acceptable', function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{bearer-token}}",
                    "type": "text"
                  },
                  {
                    "key": "x-app-key",
                    "value": "{{x-app-key}}",
                    "type": "text"
                  },
                  {
                    "key": "x-client-id",
                    "value": "{{x-client-id}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"results\": [\n        {\n            \"sourcedId\": \"{{$guid}}\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2024-01-01T00:00:00Z\",\n            \"student\": {\n                \"sourcedId\": \"{{enrolledStudentId}}\",\n                \"type\": \"user\",\n                \"href\": \"/api/users/{{enrolledStudentId}}\"\n            },\n            \"lineItem\": {\n                \"sourcedId\": \"{{$guid}}\",\n                \"type\": \"lineItem\",\n                \"href\": \"/api/lineItems/{{$guid}}\"\n            },\n            \"class\": {\n                \"sourcedId\": \"{{classSourcedId}}\",\n                \"type\": \"class\",\n                \"href\": \"/api/classes/{{classSourcedId}}\"\n            },\n            \"scoreStatus\": \"SUBMITTED\",\n      \"scoreDate\": \"2025-02-17\",\n       \"score\": 85\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{classSourcedId}}/academicSessions/{{academicSessionSourcedId}}/results",
                  "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
                  "path": [
                    "classes",
                    "{{classSourcedId}}",
                    "academicSessions",
                    "{{academicSessionSourcedId}}",
                    "results"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "classSourcedId",
      "value": "b2a85993-8b03-4560-8ab3-d39b56570827"
    },
    {
      "key": "academicSessionSourcedId",
      "value": "95fd5105-ef59-4af9-8e3d-46ecd4c754c7"
    },
    {
      "key": "wrongTermSessionId",
      "value": "65fd5105-ef59-4af9-8e3d-46ecd4c999c8"
    },
    {
      "key": "enrolledStudentId",
      "value": "3aff5855-6fa1-4c60-a1ac-0286de81e0d5"
    },
    {
      "key": "nonEnrolledStudentId",
      "value": "eceb3242-32da-4fa7-bfa0-0dfbe564f350"
    },
    {
      "key": "classLineItemId",
      "value": "b2a85993-8b03-4560-8ab3-d39b56570827"
    },
    {
      "key": "differentClassLineItemId",
      "value": "51665cee-f0a6-42dd-8481-55c910a22b4d"
    },
    {
      "key": "existingResultId",
      "value": "f00dade7-de98-43c6-a3b8-3ad68e2f6581"
    },
    {
      "key": "existingAttemptId",
      "value": "37b845b8-82f1-438b-ade4-b19df8960b93"
    },
    {
      "key": "randomClassId",
      "value": "ae954e9b-270f-495b-8e4d-12c6545dabbc",
      "type": "string"
    }
  ]
}
