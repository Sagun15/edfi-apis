{
  "info": {
    "_postman_id": "51737ed0-0e31-410a-81b0-2d802c18b6dc",
    "name": "get-results-for-student-for-class",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25454109"
  },
  "item": [
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Valid Basic Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Valid Request - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
                  "    pm.expect(responseData).to.have.property('results').that.is.an('array');",
                  "    ",
                  "    if(responseData.results.length > 0) {",
                  "        const firstResult = responseData.results[0];",
                  "        ",
                  "        pm.expect(firstResult).to.have.property('sourcedId').that.is.a('string');",
                  "        pm.expect(firstResult).to.have.property('status').that.is.a('string');",
                  "        pm.expect(firstResult).to.have.property('score');",
                  "        pm.expect(firstResult).to.have.property('scoreDate');",
                  "        pm.expect(firstResult).to.have.property('studentSourcedId').equal(pm.variables.get('validStudentSourcedId'));",
                  "        pm.expect(firstResult).to.have.property('classSourcedId').equal(pm.variables.get('validClassSourcedId'));",
                  "        ",
                  "        pm.expect(firstResult.status).to.be.oneOf(['active', 'INactive', 'DELETED']);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{validStudentSourcedId}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Pagination - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pagination parameters are respected\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.results.length).to.be.at.most(",
                  "        Number(pm.request.url.query.get('limit'))",
                  "    );",
                  "    ",
                  "    if (pm.response.headers.has('X-Total-Count')) {",
                  "        pm.expect(pm.response.headers.get('X-Total-Count')).to.be.a('string');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{validStudentSourcedId}}/results?limit=3&offset=0",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "3"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Sort and Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Sort and Order - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Results are properly sorted\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const results = responseData.results;",
                  "    ",
                  "    if (results.length > 1) {",
                  "        const orderBy = pm.request.url.query.get('orderBy') || 'DESC';",
                  "        const sortField = pm.request.url.query.get('sort') || 'scoreDate';",
                  "        ",
                  "        const isSorted = results.every((result, index) => {",
                  "            if (index === 0) return true;",
                  "            const prev = results[index - 1][sortField];",
                  "            const curr = result[sortField];",
                  "            return orderBy === 'ASC' ? prev <= curr : prev >= curr;",
                  "        });",
                  "        ",
                  "        pm.expect(isSorted).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{validStudentSourcedId}}/results?sort=scoreDate&orderBy=DESC",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "scoreDate"
                },
                {
                  "key": "orderBy",
                  "value": "DESC"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Field Selection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Field Selection - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Only requested fields are returned\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const fields = (pm.request.url.query.get('fields') || '')",
                  "        .split(',')",
                  "        .filter(Boolean);",
                  "    ",
                  "    if (fields.length > 0 && responseData.results.length > 0) {",
                  "        const firstResult = responseData.results[0];",
                  "        const returnedFields = Object.keys(firstResult);",
                  "        ",
                  "        fields.forEach(field => {",
                  "            pm.expect(returnedFields).to.include(field);",
                  "        });",
                  "        ",
                  "        returnedFields.forEach(field => {",
                  "            pm.expect(fields).to.include(field);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{validStudentSourcedId}}/results?fields=sourcedId,score,scoreDate,metadata",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "sourcedId,score,scoreDate,metadata"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Filter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Filter - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Filter is correctly applied\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const filter = pm.request.url.query.get('filter');",
                  "    ",
                  "    if (filter && filter.includes(\"status='active'\")) {",
                  "        const allActive = responseData.results.every(result => ",
                  "            result.status === 'active'",
                  "        );",
                  "        pm.expect(allActive).to.be.true;",
                  "    }",
                  "    ",
                  "    pm.expect(responseData.results).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{validStudentSourcedId}}/results?filter=status='active'",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ],
              "query": [
                {
                  "key": "filter",
                  "value": "status='active'"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Tests",
      "item": [
        {
          "name": "Non-existent Class",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent Class - Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{invalidClassSourcedId}}/students/{{validStudentSourcedId}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{invalidClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Non-existent Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent Student - Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{invalidStudentSourcedId}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{invalidStudentSourcedId}}",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Enrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid Enrollment - Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{studentNotEnrolledInClass}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{studentNotEnrolledInClass}}",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Class ID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid Class ID Format - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/invalid-uuid-format/students/{{validStudentSourcedId}}/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "invalid-uuid-format",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Student ID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid Student ID Format - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/invalid-student-id/results",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "invalid-student-id",
                "results"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Sort Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid Sort Field - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/students/{{validStudentSourcedId}}/results?sort=invalidField",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedId}}",
                "students",
                "{{validStudentSourcedId}}",
                "results"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "invalidField"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}{{gradebookServiceApiPrefix}}",
      "type": "string"
    },
    {
      "key": "x-client-id",
      "value": "{{x-client-id}}",
      "type": "string"
    },
    {
      "key": "x-app-key",
      "value": "{{x-app-key}}",
      "type": "string"
    },
    {
      "key": "bearerToken",
      "value": "{{bearer-token}}",
      "type": "string"
    },
    {
      "key": "validClassSourcedId",
      "value": "07949126-3f83-4a04-9de2-7aecd6a48fee",
      "type": "string"
    },
    {
      "key": "validStudentSourcedId",
      "value": "a1b2c3d4-e5f6-47cf-9abc-123def456792",
      "type": "string"
    },
    {
      "key": "invalidClassSourcedId",
      "value": "b698e412-52e8-480f-ba01-d35c50145e53",
      "type": "string"
    },
    {
      "key": "invalidStudentSourcedId",
      "value": "a7856e42-9cd3-45f9-87de-49e08dcfb4f2",
      "type": "string"
    },
    {
      "key": "studentWithNoResults",
      "value": "c1234567-89ab-cdef-0123-456789abcdef",
      "type": "string"
    },
    {
      "key": "studentNotEnrolledInClass",
      "value": "23354941-32b7-4bc0-aae9-c344df2ec9d8",
      "type": "string"
    }
  ]
}