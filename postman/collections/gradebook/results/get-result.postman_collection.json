{
  "info": {
    "_postman_id": "1d8c3264-5650-4557-a815-9b2c8e0c0c15",
    "name": "get-result",
    "description": "Test suite for Single Gradebook Result API focusing on happy paths with selective negative cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "31022060"
  },
  "item": [
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Get Single Result (Default)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    // Check top-level properties",
                  "    pm.expect(responseData).to.have.property('result').that.is.an('object');",
                  "    ",
                  "    const result = responseData.result;",
                  "    ",
                  "    // Required string fields",
                  "    pm.expect(result).to.have.property('sourcedId').that.is.a('string');",
                  "    pm.expect(result).to.have.property('status').that.is.a('string');",
                  "    pm.expect(result).to.have.property('dateLastModified').that.is.a('string');",
                  "    ",
                  "    // Required reference objects",
                  "    const checkRequiredReference = (obj, fieldName, hrefPath) => {",
                  "        pm.expect(obj).to.have.property(fieldName).that.is.an('object');",
                  "        pm.expect(obj[fieldName]).to.have.property('href').that.is.a('string');",
                  "        pm.expect(obj[fieldName]).to.have.property('sourcedId').that.is.a('string');",
                  "        pm.expect(obj[fieldName]).to.have.property('type').that.is.a('string');",
                  "        pm.expect(obj[fieldName].href).to.include(hrefPath);",
                  "    };",
                  "    ",
                  "    if (result.lineItem !== undefined && result.lineItem !== null){",
                  "        checkRequiredReference(result, 'lineItem', '/lineItems/');",
                  "    }",
                  "",
                  "    if (result.student !== undefined && result.student !== null){",
                  "        checkRequiredReference(result, 'student', '/users/');",
                  "    }",
                  "",
                  "    if (result.class !== undefined && result.class !== null) {",
                  "        checkRequiredReference(result, 'class', '/classes/');",
                  "    }",
                  "",
                  "    if (result.scoreScale !== undefined && result.scoreScale !== null) {",
                  "        checkRequiredReference(result, 'scoreScale', '/scoreScales/');",
                  "    }",
                  "    ",
                  "    // Required fields",
                  "    pm.expect(result).to.have.property('scoreStatus').that.is.a('string');",
                  "    pm.expect(result).to.have.property('scoreDate').that.is.a('string');",
                  "    ",
                  "    // Optional numeric fields (can be null)",
                  "    pm.expect(result).to.have.property('score');",
                  "    if (result.score !== null && result.score !== undefined) {",
                  "        pm.expect(result.score).to.be.a('number');",
                  "    }",
                  "    ",
                  "    pm.expect(result).to.have.property('scorePercentile');",
                  "    if (result.scorePercentile !== null && result.scorePercentile !== undefined) {",
                  "        pm.expect(result.scorePercentile).to.be.a('number');",
                  "    }",
                  "    ",
                  "    // Optional string fields (can be null)",
                  "    pm.expect(result).to.have.property('textScore');",
                  "    if (result.textScore !== null && result.textScore !== undefined) {",
                  "        pm.expect(result.textScore).to.be.a('string');",
                  "    }",
                  "    ",
                  "    pm.expect(result).to.have.property('comment');",
                  "    if (result.comment !== null && result.comment !== undefined) {",
                  "        pm.expect(result.comment).to.be.a('string');",
                  "    }",
                  "    ",
                  "    // Optional boolean fields (can be null)",
                  "    const booleanFields = ['inProgress', 'incomplete', 'late', 'missing'];",
                  "    booleanFields.forEach(field => {",
                  "        pm.expect(result).to.have.property(field);",
                  "        if (result[field] !== null && result[field] !== undefined) {",
                  "            pm.expect(result[field]).to.be.a('boolean');",
                  "        }",
                  "    });",
                  "    ",
                  "    // Optional learningObjectiveSet",
                  "    pm.expect(result).to.have.property('learningObjectiveSet');",
                  "    // Note: Not checking type as it's marked as 'any' in DTO",
                  "    ",
                  "    // Date field validation",
                  "    const date = new Date(result.scoreDate);",
                  "    pm.expect(date.toISOString()).to.equal(result.scoreDate);",
                  "",
                  "    // Validate status values",
                  "    pm.expect(result.status).to.be.oneOf(['active',  'tobedeleted']);",
                  "    pm.expect(result.scoreStatus).to.be.oneOf(['SUBMITTED', 'FULLY_GRADED', 'PARTIALLY_GRADED', 'NOT_GRADED']);",
                  "    ",
                  "    // Validate reference URLs",
                  "    if (result.lineItem?.href) {",
                  "        pm.expect(result.lineItem.href).to.include('/v1/lineItems/');",
                  "    }",
                  "    if (result.student?.href) {",
                  "        pm.expect(result.student.href).to.include('/v1/users/');",
                  "    }",
                  "    if (result.class?.href) {",
                  "        pm.expect(result.class.href).to.include('/v1/classes/');",
                  "    }",
                  "    if (result.scoreScale?.href) {",
                  "        pm.expect(result.scoreScale.href).to.include('/v1/scoreScales/');",
                  "    }",
                  "});",
                  "",
                  "// Performance test",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/results/{{validSourcedId}}",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["results", "{{validSourcedId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Single Result (Selected Fields)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Only requested fields are returned\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('result').that.is.an('object');",
                  "    ",
                  "    const result = responseData.result;",
                  "    ",
                  "    // Define expected fields",
                  "    const expectedFields = ['sourcedId', 'score', 'status'];",
                  "    ",
                  "    // Get actual fields from the response",
                  "    const actualFields = Object.keys(result);",
                  "    ",
                  "    // Check if only expected fields are present",
                  "    const hasOnlyExpectedFields = expectedFields.every(field => actualFields.includes(field));",
                  "    pm.expect(hasOnlyExpectedFields, 'All expected fields should be present').to.be.true;",
                  "    ",
                  "    const hasNoExtraFields = actualFields.every(field => expectedFields.includes(field));",
                  "    pm.expect(hasNoExtraFields, 'No extra fields should be present').to.be.true;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/results/{{validSourcedId}}?fields=sourcedId,score,status",
              "host": ["{{baseUrl}}"],
              "path": ["results", "{{validSourcedId}}"],
              "query": [
                {
                  "key": "fields",
                  "value": "sourcedId,score,status"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Negative Tests",
      "item": [
        {
          "name": "Invalid Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description').equal('Missing required headers');",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
                  "    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
                  "    ",
                  "    const errorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
                  "    pm.expect(errorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
                  "    pm.expect(errorField).to.have.property('imsx_codeMinorFieldValue').equal('unauthorisedrequest');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/results/{{validSourcedId}}",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["results", "{{validSourcedId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid SourcedId Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description').to.include('Invalid sourcedId format');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/results/invalid-uuid",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["results", "invalid-uuid"]
            }
          },
          "response": []
        },
        {
          "name": "Not Found SourcedId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description').to.contain('not found');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/results/{{notFoundSourcedId}}",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["results", "{{notFoundSourcedId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Edge Case Tests",
      "item": [
        {
          "name": "Special Characters in SourcedId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates invalid characters\", function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('imsx_description').to.include('invalid characters');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{bearer-token}}"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/results/!@#$%^&*()",
              "host": ["{{baseUrl}}"],
              "path": ["results", "!@"],
              "hash": "$%^&*()"
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "x-client-id",
      "value": "{{x-client-id}}",
      "type": "string"
    },
    {
      "key": "x-app-key",
      "value": "{{x-app-key}}",
      "type": "string"
    },
    {
      "key": "bearerToken",
      "value": "{{bearer-token}}",
      "type": "string"
    },
    {
      "key": "validSourcedId",
      "value": "2c6e7189-6077-4228-9ef8-4cf9a36c7fcb",
      "type": "string"
    },
    {
      "key": "notFoundSourcedId",
      "value": "123e4567-e89b-12d3-a456-426614174000",
      "type": "string"
    }
  ]
}