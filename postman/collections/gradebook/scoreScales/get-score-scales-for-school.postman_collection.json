{
	"info": {
		"_postman_id": "2defeb65-1d9d-4960-a96a-22b90ae93d47",
		"name": "getScoreScalesForSchool",
		"description": "Postman Collection for getScoreScalesForSchool() API (GradeBook)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36990357"
	},
	"item": [
		{
			"name": "Happy Path Tests",
			"item": [
				{
					"name": "200 fields with unknown fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Basic Valid Request - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('scoreScales').that.is.an('array');",
									"",
									"    if (responseData.scoreScales.length > 0) {",
									"        const firstResult = responseData.scoreScales[0];",
									"",
									"        pm.expect(firstResult).to.have.property('sourcedId').that.is.a('string');",
									"        pm.expect(firstResult).to.have.property('status').that.is.a('string');",
									"",
									"        pm.expect(firstResult).to.have.property('title');",
									"        pm.expect(firstResult).to.have.property('type');",
									"        pm.expect(firstResult).to.have.property('class');",
									"",
									"        pm.expect(firstResult.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'TO_BE_DELETED']);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?fields=unknown_fields",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "fields",
									"value": "unknown_fields"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 school with No scoreScales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Basic Valid Request - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('scoreScales').that.is.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales"
					},
					"response": []
				},
				{
					"name": "200 Basic Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Basic Pagination - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Pagination parameters are respected\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.scoreScales.length).to.be.at.most(",
									"        Number(pm.request.url.query.get('limit'))",
									"    );",
									"",
									"    if (pm.response.headers.has('X-Total-Count')) {",
									"        pm.expect(pm.response.headers.get('X-Total-Count')).to.be.a('string');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?limit=1&offset=0",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Basic Sort & Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sort and Order - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"scoreScales are properly sorted\", function () {",
									"    const responseData = pm.response.json();",
									"    const scoreScales = responseData.scoreScales;",
									"",
									"    if (scoreScales.length > 1) {",
									"        const orderBy = pm.request.url.query.get('orderBy') || 'ASC';",
									"        const sortField = pm.request.url.query.get('sort') || 'dateLastModified';",
									"",
									"        const isSorted = scoreScales.every((lineItem, index) => {",
									"            if (index === 0) return true;",
									"            const prev = scoreScales[index - 1][sortField];",
									"            const curr = lineItem[sortField];",
									"            return orderBy === 'ASC' ? prev <= curr : prev >= curr;",
									"        });",
									"",
									"        pm.expect(isSorted).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?sort=dateLastModified&orderBy=ASC",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "sort",
									"value": "dateLastModified"
								},
								{
									"key": "orderBy",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Fields with known fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Field Selection - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Only requested fields are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    const fields = (pm.request.url.query.get('fields') || '')",
									"        .split(',')",
									"        .filter(Boolean);",
									"",
									"    if (fields.length > 0 && responseData.scoreScales.length > 0) {",
									"        const firstResult = responseData.scoreScales[0];",
									"        const returnedFields = Object.keys(firstResult);",
									"",
									"        fields.forEach(field => {",
									"            pm.expect(returnedFields).to.include(field);",
									"        });",
									"",
									"        returnedFields.forEach(field => {",
									"            pm.expect(fields).to.include(field);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?fields=sourcedId,title,class,course",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "fields",
									"value": "sourcedId,title,class,course"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Filter condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Filter - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter is correctly applied\", function () {",
									"    const responseData = pm.response.json();",
									"    const filter = pm.request.url.query.get('filter');",
									"",
									"    if (filter && filter.includes(\"status='ACTIVE'\")) {",
									"        const allActive = responseData.scoreScales.every(result =>",
									"            result.status === 'ACTIVE'",
									"        );",
									"        pm.expect(allActive).to.be.true;",
									"    }",
									"",
									"    pm.expect(responseData.scoreScales).to.be.an('array');",
									"    if (responseData.scoreScales.length > 0) {",
									"        console.log(\"Sample filtered scoreScales:\",",
									"            responseData.scoreScales.slice(0, 2));",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?limit=100&offset=0&filter=status%3D%27active%27",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "filter",
									"value": "status%3D%27active%27"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "401 - UnAuthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing required headers - Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response structure is correct for missing headers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check top level properties ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"        .equal('Missing required headers');",
									"",
									"    // Check imsx_CodeMinor structure",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"",
									"    // Check first code minor field entry",
									"    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('unauthorisedrequest');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales"
					},
					"response": []
				},
				{
					"name": "400 - Limit Without Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing pagination parameter - Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct for incomplete pagination\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check top level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"        .equal('Limit and offset must be provided together');",
									"",
									"    // Check imsx_CodeMinor structure",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"",
									"    // Check first code minor field entry",
									"    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('bad_request');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?limit=1",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Negative Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid limit parameter - Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct for invalid limit\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check top level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"        .equal('Limit must be a positive number');",
									"",
									"    // Check imsx_CodeMinor structure",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"",
									"    // Check first code minor field entry",
									"    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('bad_request');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?limit=-1&offset=0",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Malformed Fields parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Malformed fields parameter - Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check top level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"        .equal('Malformed fields parameter');",
									"",
									"    // Check imsx_CodeMinor structure",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"",
									"    // Check first code minor field entry",
									"    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('invalid_filter_field');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{validSchoolSourcedId}}/scoreScales?fields=,,,",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"schools",
								"{{validSchoolSourcedId}}",
								"scoreScales"
							],
							"query": [
								{
									"key": "fields",
									"value": ",,,"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Bad sourcedId type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid School ID Format - Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"        .equal('schoolSourcedId Id must be of type UUID');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{invalidSchoolSourcedIdType}}/scoreScales"
					},
					"response": []
				},
				{
					"name": "404 -  Non existing School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non-existent School - Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Non-existent School - Error response structure is valid\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description').that.includes('does not exist');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{vault:token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/schools/{{nonExistingSchoolSourcedId}}/scoreScales"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "validClassSourcedId",
			"value": "<valid-class-sourced-id>",
			"type": "default"
		},
		{
			"key": "validClassSourcedIdWithNoLineItems",
			"value": "<valid-class-sourced-id-with-no-line-item>",
			"type": "default"
		},
		{
			"key": "nonExistentClassSourcedId",
			"value": "<non-existent-class-sourced-id>",
			"type": "default"
		},
		{
			"key": "badClassSourcedId",
			"value": "<bad-class-sourced-id>",
			"type": "default"
		},
		{
			"key": "validSchoolSourcedId",
			"value": "<valid-school-sourced-id>",
			"type": "default"
		},
		{
			"key": "schoolWithNoScoreScales",
			"value": "<school-with-no-score-scales>",
			"type": "default"
		},
		{
			"key": "invalidSchoolSourcedIdType",
			"value": "<invalid-school-sourced-id-type>",
			"type": "default"
		},
		{
			"key": "nonExistingSchoolSourcedId",
			"value": "<non-existing-school-sourced-id>",
			"type": "default"
		},
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"type": "string"
		},
		{
			"key": "x-client-id",
			"value": "{{x-client-id}}",
			"type": "string"
		},
		{
			"key": "gradebookServiceApiPrefix",
			"value": "/ims/oneroster/gradebook/v1p2",
			"type": "string"
		},
		{
			"key": "x-app-key",
			"value": "{{x-app-key}}",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "{{bearer-token}}",
			"type": "string"
		}
	]
}