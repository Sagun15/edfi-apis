{
	"info": {
		"_postman_id": "7ccd49aa-562d-4806-a950-26c932ef13f4",
		"name": "get-score-scales",
		"description": "Test suite for Single Score Scale API focusing on happy paths with selective negative cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36990357"
	},
	"item": [
		{
			"name": "Happy Path Tests",
			"item": [
				{
					"name": "Get Single Score Scale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check top-level properties",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('scoreScale').that.is.an('object');",
									"    ",
									"    const result = responseData.scoreScale;",
									"    ",
									"    // Required string fields",
									"    pm.expect(result).to.have.property('sourcedId').that.is.a('string');",
									"    pm.expect(result).to.have.property('status').that.is.a('string');",
									"    pm.expect(result).to.have.property('dateLastModified').that.is.a('string');",
									"    pm.expect(result).to.have.property('title').that.is.a('string');",
									"    pm.expect(result).to.have.property('type').that.is.a('string');",
									"    ",
									"    // Required reference objects",
									"    const checkRequiredReference = (obj, fieldName) => {",
									"        pm.expect(obj).to.have.property(fieldName).that.is.an('object');",
									"        pm.expect(obj[fieldName]).to.have.property('href').that.is.a('string');",
									"        pm.expect(obj[fieldName]).to.have.property('sourcedId').that.is.a('string');",
									"        pm.expect(obj[fieldName]).to.have.property('type').that.is.a('string');",
									"    };",
									"    ",
									"    if (result.course !== undefined && result.course !== null) {",
									"        checkRequiredReference(result, 'course');",
									"    }",
									"",
									"    if (result.class !== undefined && result.class !== null) {",
									"        checkRequiredReference(result, 'class');",
									"    }",
									"    ",
									"    // Check scoreScaleValue array",
									"    pm.expect(result).to.have.property('scoreScaleValue').that.is.an('array');",
									"    result.scoreScaleValue.forEach(value => {",
									"        pm.expect(value).to.have.property('itemValueLHS').that.is.a('string');",
									"        pm.expect(value).to.have.property('itemValueRHS').that.is.a('string');",
									"    });",
									"    ",
									"    // Optional metadata field",
									"    pm.expect(result).to.have.property('metadata');",
									"    ",
									"    // Date field validation",
									"    const date = new Date(result.dateLastModified);",
									"    pm.expect(date.toISOString()).to.equal(result.dateLastModified);",
									"",
									"    // Validate status values",
									"    pm.expect(result.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'TO_BE_DELETED']);",
									"    ",
									"    // Validate reference URLs",
									"    if (result.course?.href) {",
									"        pm.expect(result.course.href).to.include('/v1/courses/');",
									"    }",
									"    if (result.class?.href) {",
									"        pm.expect(result.class.href).to.include('/v1/classes/');",
									"    }",
									"});",
									"",
									"// Performance test",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/scoreScales/{{validSourcedId}}"
					},
					"response": []
				},
				{
					"name": "Get Score Scale (Selected Fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Only requested fields are returned\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('scoreScale').that.is.an('object');",
									"    ",
									"    const result = responseData.scoreScale;",
									"    ",
									"    // Define expected fields",
									"    const expectedFields = ['sourcedId', 'title', 'status'];",
									"    ",
									"    // Get actual fields from the response",
									"    const actualFields = Object.keys(result);",
									"    ",
									"    // Check if only expected fields are present",
									"    const hasOnlyExpectedFields = expectedFields.every(field => actualFields.includes(field));",
									"    pm.expect(hasOnlyExpectedFields, 'All expected fields should be present').to.be.true;",
									"    ",
									"    const hasNoExtraFields = actualFields.every(field => expectedFields.includes(field));",
									"    pm.expect(hasNoExtraFields, 'No extra fields should be present').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/scoreScales/{{validSourcedId}}?fields=sourcedId,title,status",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"scoreScales",
								"{{validSourcedId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "sourcedId,title,status"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Invalid Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description').equal('Missing required headers');",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    ",
									"    const errorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
									"    pm.expect(errorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
									"    pm.expect(errorField).to.have.property('imsx_codeMinorFieldValue').equal('unauthorisedrequest');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/scoreScales/{{validSourcedId}}"
					},
					"response": []
				},
				{
					"name": "Invalid SourcedId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/scoreScales/invalid-uuid"
					},
					"response": []
				},
				{
					"name": "Empty Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/scoreScales/{{validSourcedId}}?fields",
							"host": [
								"{{baseUrl}}{{gradebookServiceApiPrefix}}"
							],
							"path": [
								"scoreScales",
								"{{validSourcedId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Not Found SourcedId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearer-token}}"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}"
							},
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}"
							}
						],
						"url": "{{baseUrl}}{{gradebookServiceApiPrefix}}/scoreScales/{{$guid}}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "validSourcedId",
			"value": "ead5a240-5a41-41f0-bc7b-5cc542767c07",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"type": "string"
		},
		{
			"key": "x-client-id",
			"value": "{{x-client-id}}",
			"type": "string"
		},
		{
			"key": "gradebookServiceApiPrefix",
			"value": "/ims/oneroster/gradebook/v1p2",
			"type": "string"
		},
		{
			"key": "x-app-key",
			"value": "{{x-app-key}}",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "{{bearer-token}}",
			"type": "string"
		}
	]
}