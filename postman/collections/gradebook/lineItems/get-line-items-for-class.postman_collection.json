{
  "info": {
    "_postman_id": "e13c51f6-35f8-4489-9a5a-cc97383a2307",
    "name": "get-line-items-for-class",
    "description": "Postman Collection for getLineItemsForClass() API (GradeBook)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "31022060"
  },
  "item": [
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "200 fields with unknown fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Valid Request - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
                  "    pm.expect(responseData).to.have.property('lineItems').that.is.an('array');",
                  "",
                  "    if (responseData.lineItems.length > 0) {",
                  "        const firstResult = responseData.lineItems[0];",
                  "",
                  "        pm.expect(firstResult).to.have.property('sourcedId').that.is.a('string');",
                  "        pm.expect(firstResult).to.have.property('status').that.is.a('string');",
                  "",
                  "        pm.expect(firstResult).to.have.property('title');",
                  "        pm.expect(firstResult).to.have.property('description');",
                  "        pm.expect(firstResult).to.have.property('class');",
                  "",
                  "        pm.expect(firstResult.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'TO_BE_DELETED']);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?fields=unknown_field",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "fields",
                  "value": "unknown_field"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Class with No LineItems",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Valid Request - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
                  "    pm.expect(responseData).to.have.property('lineItems').that.is.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedIdWithNoLineItems}}/lineItems",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": [
                "classes",
                "{{validClassSourcedIdWithNoLineItems}}",
                "lineItems"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Basic Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Pagination - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pagination parameters are respected\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    pm.expect(responseData.lineItems.length).to.be.at.most(",
                  "        Number(pm.request.url.query.get('limit'))",
                  "    );",
                  "",
                  "    if (pm.response.headers.has('X-Total-Count')) {",
                  "        pm.expect(pm.response.headers.get('X-Total-Count')).to.be.a('string');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?limit=1&offset=0",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "limit",
                  "value": "1"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Basic Sort & Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Sort and Order - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"lineItems are properly sorted\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const lineItems = responseData.lineItems;",
                  "",
                  "    if (lineItems.length > 1) {",
                  "        const orderBy = pm.request.url.query.get('orderBy') || 'ASC';",
                  "        const sortField = pm.request.url.query.get('sort') || 'dateLastModified';",
                  "",
                  "        const isSorted = lineItems.every((lineItem, index) => {",
                  "            if (index === 0) return true;",
                  "            const prev = lineItems[index - 1][sortField];",
                  "            const curr = lineItem[sortField];",
                  "            return orderBy === 'ASC' ? prev <= curr : prev >= curr;",
                  "        });",
                  "",
                  "        pm.expect(isSorted).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?sort=dateLastModified&orderBy=ASC",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "sort",
                  "value": "dateLastModified"
                },
                {
                  "key": "orderBy",
                  "value": "ASC"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Fields with known fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Field Selection - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Only requested fields are returned\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const fields = (pm.request.url.query.get('fields') || '')",
                  "        .split(',')",
                  "        .filter(Boolean);",
                  "",
                  "    if (fields.length > 0 && responseData.lineItems.length > 0) {",
                  "        const firstResult = responseData.lineItems[0];",
                  "        const returnedFields = Object.keys(firstResult);",
                  "",
                  "        fields.forEach(field => {",
                  "            pm.expect(returnedFields).to.include(field);",
                  "        });",
                  "",
                  "        returnedFields.forEach(field => {",
                  "            pm.expect(fields).to.include(field);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?fields=sourcedId,title,description",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "fields",
                  "value": "sourcedId,title,description"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Filter condition",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Filter - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Filter is correctly applied\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const filter = pm.request.url.query.get('filter');",
                  "",
                  "    if (filter && filter.includes(\"status='ACTIVE'\")) {",
                  "        const allActive = responseData.lineItems.every(result =>",
                  "            result.status === 'ACTIVE'",
                  "        );",
                  "        pm.expect(allActive).to.be.true;",
                  "    }",
                  "",
                  "    pm.expect(responseData.lineItems).to.be.an('array');",
                  "    if (responseData.lineItems.length > 0) {",
                  "        console.log(\"Sample filtered lineItems:\",",
                  "            responseData.lineItems.slice(0, 2));",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?limit=100&offset=0&filter=status%3D%27active%27",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "limit",
                  "value": "100"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "filter",
                  "value": "status%3D%27active%27"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Negative Tests",
      "item": [
        {
          "name": "401 - UnAuthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Missing required headers - Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct for missing headers\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    // Check top level properties ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description')",
                  "        .equal('Missing required headers');",
                  "",
                  "    // Check imsx_CodeMinor structure",
                  "    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
                  "    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
                  "",
                  "    // Check first code minor field entry",
                  "    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('unauthorisedrequest');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/classes/{{validClassSourcedId}}/lineItems",
              "host": ["{{baseUrl}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"]
            }
          },
          "response": []
        },
        {
          "name": "400 - Limit Without Offset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Missing pagination parameter - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct for incomplete pagination\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    // Check top level properties",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description')",
                  "        .equal('Limit and offset must be provided together');",
                  "",
                  "    // Check imsx_CodeMinor structure",
                  "    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
                  "    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
                  "",
                  "    // Check first code minor field entry",
                  "    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('bad_request');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?limit=1",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "limit",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 - Negative Limit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid limit parameter - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct for invalid limit\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    // Check top level properties",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description')",
                  "        .equal('Limit must be a positive number');",
                  "",
                  "    // Check imsx_CodeMinor structure",
                  "    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
                  "    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
                  "",
                  "    // Check first code minor field entry",
                  "    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('bad_request');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?limit=-1&offset=0",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "limit",
                  "value": "-1"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 - Malformed Fields parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Malformed fields parameter - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    // Check top level properties",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description')",
                  "        .equal('Malformed fields parameter');",
                  "",
                  "    // Check imsx_CodeMinor structure",
                  "    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
                  "    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
                  "",
                  "    // Check first code minor field entry",
                  "    const codeMinorField = responseData.imsx_CodeMinor.imsx_codeMinorField[0];",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
                  "    pm.expect(codeMinorField).to.have.property('imsx_codeMinorFieldValue').equal('invalid_filter_field');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{validClassSourcedId}}/lineItems?fields=,,,",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{validClassSourcedId}}", "lineItems"],
              "query": [
                {
                  "key": "fields",
                  "value": ",,,"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 - Bad sourcedId type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid Class ID Format - Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure is correct\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description')",
                  "        .equal('sourcedId must be of type UUID');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{badClassSourcedId}}/lineItems",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{badClassSourcedId}}", "lineItems"]
            }
          },
          "response": []
        },
        {
          "name": "404 -  Non existing class",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent Class - Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Non-existent Class - Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description').that.includes('not found');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "bearerToken",
                  "value": "{{vault:token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{gradebookServiceApiPrefix}}/classes/{{nonExistentClassSourcedId}}",
              "host": ["{{baseUrl}}{{gradebookServiceApiPrefix}}"],
              "path": ["classes", "{{nonExistentClassSourcedId}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "validClassSourcedId",
      "value": "31cab1d7-840f-4cea-8279-0fa5aa5f40ce",
      "type": "default"
    },
    {
      "key": "validClassSourcedIdWithNoLineItems",
      "value": "50dbfc64-be7e-4fd1-a896-bb6ce1d4f13b",
      "type": "default"
    },
    {
      "key": "nonExistentClassSourcedId",
      "value": "31cab1d7-840f-4cea-8279-0fa5aa5f40cd",
      "type": "default"
    },
    {
      "key": "badClassSourcedId",
      "value": "12345",
      "type": "default"
    }
  ]
}