{
	"info": {
    "_postman_id": "09887acf-d92a-4dd7-824c-da3f00850c85",
    "name": "get-resources-for-user Copy",
    "description": "Test suite for getResourcesForUser API covering various filter, sort, pagination, and error scenarios",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "31022060"
  },
	"item": [
		{
			"name": "Happy Path Tests",
			"item": [
        {
          "name": "Valid Basic Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Valid Request - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('success');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
                  "    pm.expect(responseData).to.have.property('resources').that.is.an('array');",
                  "    ",
                  "    if(responseData.resources.length > 0) {",
                  "        const firstResult = responseData.resources[0];",
                  "        ",
                  "        pm.expect(firstResult).to.have.property('sourcedId').that.is.a('string');",
                  "        pm.expect(firstResult).to.have.property('status').that.is.a('string');",
                  "        pm.expect(firstResult).to.have.property('title').that.is.a('string');",
                  "    ",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"]
            }
          },
          "response": []
        },
        {
          "name": "Basic Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Basic Pagination - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pagination parameters are respected\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.resources.length).to.be.at.most(",
                  "        Number(pm.request.url.query.get('limit'))",
                  "    );",
                  "    ",
                  "    if (pm.response.headers.has('X-Total-Count')) {",
                  "        pm.expect(pm.response.headers.get('X-Total-Count')).to.be.a('string');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources?limit=5&offset=0",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Sort and Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Sort and Order - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Results are properly sorted\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const results = responseData.resources;",
                  "    ",
                  "    if (results.length > 1) {",
                  "        const orderBy = pm.request.url.query.get('orderBy') || 'ASC';",
                  "        const sortField = pm.request.url.query.get('sort') || 'dateLastModified';",
                  "        ",
                  "        const isSorted = results.every((result, index) => {",
                  "            if (index === 0) return true;",
                  "            const prev = results[index - 1][sortField];",
                  "            const curr = result[sortField];",
                  "            return orderBy === 'ASC' ? prev <= curr : prev >= curr;",
                  "        });",
                  "        ",
                  "        pm.expect(isSorted).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources?sort=title&orderBy=ASC",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"],
              "query": [
                {
                  "key": "sort",
                  "value": "title"
                },
                {
                  "key": "orderBy",
                  "value": "ASC"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Field Selection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Field Selection - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Only requested fields are returned\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const fields = (pm.request.url.query.get('fields') || '')",
                  "        .split(',')",
                  "        .filter(Boolean);",
                  "    ",
                  "    if (fields.length > 0 && responseData.resources.length > 0) {",
                  "        const firstResult = responseData.resources[0];",
                  "        const returnedFields = Object.keys(firstResult);",
                  "        ",
                  "        fields.forEach(field => {",
                  "            pm.expect(returnedFields).to.include(field);",
                  "        });",
                  "        ",
                  "        returnedFields.forEach(field => {",
                  "            pm.expect(fields).to.include(field);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources?fields=sourcedId,title",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"],
              "query": [
                {
                  "key": "fields",
                  "value": "sourcedId,title"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Filter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Filter - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Filter is correctly applied\", function () {",
                  "    const responseData = pm.response.json();",
                  "    const filter = pm.request.url.query.get('filter');",
                  "    ",
                  "    if (filter && filter.includes(\"status='ACTIVE'\")) {",
                  "        const allActive = responseData.resources.every(result => ",
                  "            result.status === 'ACTIVE'",
                  "        );",
                  "        pm.expect(allActive).to.be.true;",
                  "    }",
                  "    ",
                  "    pm.expect(responseData.resources).to.be.an('array');",
                  "    if (responseData.resources.length > 0) {",
                  "        console.log(\"Sample filtered results:\", ",
                  "            responseData.resources.slice(0, 2));",
                  "}",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources?filter=status='tobedeleted'",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"],
              "query": [
                {
                  "key": "filter",
                  "value": "status='tobedeleted'"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Empty Result",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Empty Results - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Empty results handled correctly\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor')",
                  "        .equal('success');",
                  "    pm.expect(responseData).to.have.property('resources')",
                  "        .that.is.an('array').that.is.empty;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{userSourcedIdWithNoResouces}}/resources",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{userSourcedIdWithNoResouces}}", "resources"]
            }
          },
          "response": []
        }
      ]
		},
		{
			"name": "Negative Tests",
			"item": [
        {
          "name": "Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent Class - Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Non-existent Class - Error response structure is valid\", function () {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
                  "    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
                  "    pm.expect(responseData).to.have.property('imsx_description').that.includes('No user found with sourced id');",
                  "    ",
                  "    pm.expect(responseData).to.have.property('imsx_CodeMinor');",
                  "    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
                  "    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0]).to.have.property('imsx_codeMinorFieldName').equal('TargetEndSystem');",
                  "    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0]).to.have.property('imsx_codeMinorFieldValue').equal('unknownobject');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{invalidUserSourcedId}}/resources",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{invalidUserSourcedId}}", "resources"]
            }
          },
          "response": []
        },
        {
          "name": "Edge Cases",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Edge Cases - Invalid pagination values\", function () {",
                  "    const limit = Number(pm.request.url.query.get('limit'));",
                  "    const offset = Number(pm.request.url.query.get('offset'));",
                  "    ",
                  "    if (limit <= 0 || offset < 0) {",
                  "        pm.expect(pm.response.code).to.equal(400);",
                  "        const responseData = pm.response.json();",
                  "        pm.expect(responseData.imsx_description)",
                  "            .to.include('Limit and offset must be provided together');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources?limit=0",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"],
              "query": [
                {
                  "key": "limit",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Sort Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid Sort Field - Status code is 400\", function () {",
                  "    const sortField = pm.request.url.query.get('sort');",
                  "    const validFields = ['dateLastModified', 'score', 'status']; ",
                  "    if (!validFields.includes(sortField)) {",
                  "        pm.expect(pm.response.code).to.equal(400);",
                  "        const responseData = pm.response.json();",
                  "        pm.expect(responseData.imsx_description)",
                  "            .to.include('Invalid sort field');",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-client-id",
                "value": "{{x-client-id}}",
                "type": "text"
              },
              {
                "key": "x-app-key",
                "value": "{{x-app-key}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{bearer-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{resourcesServiceApiPrefix}}/users/{{validUserSourcedId}}/resources?sort=invalidField",
              "host": ["{{baseUrl}}{{resourcesServiceApiPrefix}}"],
              "path": ["users", "{{validUserSourcedId}}", "resources"],
              "query": [
                {
                  "key": "sort",
                  "value": "invalidField"
                }
              ]
            }
          },
          "response": []
        }
      ]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "<url>",
			"type": "string"
		},
		{
			"key": "x-client-id",
			"value": "<client-id>",
			"type": "string"
		},
		{
			"key": "x-app-key",
			"value": "<app-key>",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "<token>",
			"type": "string"
		},
		{
			"key": "validUserSourcedId",
			"value": "<valid-user-sourced-id>",
			"type": "default"
		},
		{
			"key": "validUsesrSourcedId",
			"value": "<valid-user-sourced-id>",
			"type": "default"
		},
		{
			"key": "userSourcedIdWithNoResouces",
			"value": "<user-sourced-id-with-no-resources>",
			"type": "default"
		},
		{
			"key": "invalidUserSourcedId",
			"value": "<invalid-user-sourced-id>",
			"type": "default"
		}
	]
}