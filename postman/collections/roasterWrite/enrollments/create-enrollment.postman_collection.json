{
	"info": {
		"_postman_id": "d92d0cc8-4fd6-41cf-8179-0cc68fd7d081",
		"name": "createEnrollment",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36990357"
	},
	"item": [
		{
			"name": "Happy Path Scenarios",
			"item": [
				{
					"name": "Create with All Valid Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('created');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('sourcedIdPairs')",
									"    pm.expect(responseData).to.have.property('sourcedIdPairs').that.is.an('object');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"metadata\":{\"name\":\"kickdrum\"}, \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"primary\":null, \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Create with Minimum Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('created');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('status');",
									"    pm.expect(responseData).to.have.property('sourcedIdPairs')",
									"    pm.expect(responseData).to.have.property('sourcedIdPairs').that.is.an('object');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Invalid UUID Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData.imsx_description).to.include('sourcedId must be a UUID');",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('invalid_request_body');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"invalid-sourced-id\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Invalid Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('invalid_request_body');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025/02/31\", \"endDate\": \"2025/10/31\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Missing Required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('invalid_request_body');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Empty String in the Required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('invalid_request_body');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"\", \"beginDate\": \"2025-02-05\", \"endDate\": \"2025-10-05\" }"
						},
						"url": "{{baseUrl}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Non-existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('unknownobject');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Non-existent Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('unknownobject');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Non-existent School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('unknownobject');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Invalid Begin/End Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('invalid_request_body');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Unauthorized Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response structure is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('imsx_codeMajor').equal('failure');",
									"    pm.expect(responseData).to.have.property('imsx_severity').equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description');",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('unauthorisedrequest');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Enrollment Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('conflict_error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "UserProfile with given role does not exist for given user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor')",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('bad_request');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"TEACHER\", \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Non-Teacher Roles do not have primary/non-primary values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description');",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('bad_request');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"STUDENT\", \"primary\": true, \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				},
				{
					"name": "Overlapping Primary Enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response contains correct message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.imsx_codeMajor).to.equal('failure');",
									"    pm.expect(responseData.imsx_severity).to.equal('error');",
									"    pm.expect(responseData).to.have.property('imsx_description')",
									"    pm.expect(responseData).to.have.property('imsx_CodeMinor').that.is.an('object');",
									"    pm.expect(responseData.imsx_CodeMinor).to.have.property('imsx_codeMinorField').that.is.an('array');",
									"    pm.expect(responseData.imsx_CodeMinor.imsx_codeMinorField[0].imsx_codeMinorFieldValue).to.include('bad_request');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{x-client-id}}",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{bearer-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"sourcedId\": \"{{enrollmentSourcedId}}\", \"status\": \"active\", \"user\": { \"href\": \"/users/{{userSourcedId}}\", \"sourcedId\": \"{{userSourcedId}}\", \"type\": \"user\" }, \"class\": { \"href\": \"/class/{{classSourcedId}}\", \"sourcedId\": \"{{classSourcedId}}\", \"type\": \"class\" }, \"school\": { \"href\": \"/school/{{schoolSourcedId}}\", \"sourcedId\": \"{{schoolSourcedId}}\", \"type\": \"org\" }, \"role\":\"TEACHER\", \"primary\": true, \"beginDate\": \"2025-02-13T12:00:00Z\", \"endDate\": \"2025-02-13T12:00:00Z\" }"
						},
						"url": "{{baseUrl}}{{rosteringWriteServiceApiPrefix}}/enrollments"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"type": "string"
		},
		{
			"key": "x-client-id",
			"value": "{{x-client-id}}",
			"type": "string"
		},
		{
			"key": "rosteringWriteServiceApiPrefix",
			"value": "/custom/rostering/v1p0",
			"type": "string"
		},
		{
			"key": "x-app-key",
			"value": "{{x-app-key}}",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "{{bearer-token}}",
			"type": "string"
		}
	]
}